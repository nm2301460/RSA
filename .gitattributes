import random
import math
import time

def is_prime(n):
    """Check if a number is prime."""
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    # Check divisibility by all numbers of the form 6k Â± 1 up to sqrt(n)
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

    def generate_large_prime(bits):
    """Generate a large prime number with the specified number of bits."""
    while True:
        # Generate a random number in the specified range
        p = random.randint(2**(bits-1), 2**bits)
        # Check if the number is prime
        if is_prime(p):
            return p

def gcd(a, b):
    """Calculate the greatest common divisor of two numbers using the Euclidean algorithm."""
    while b != 0:
        a, b = b, a % b
    return a

def extended_gcd(a, b):
    """Calculate the extended Euclidean algorithm to find the modular inverse."""
    if a == 0:
        return b, 0, 1
    else:
        # Recursively call the extended Euclidean algorithm
        gcd_val, x, y = extended_gcd(b % a, a)
        return (gcd_val, y - (b // a) * x, x)

def factorize_modulus(N):
    """Factorize the modulus N into its prime factors."""
    for i in range(2, int(math.sqrt(N)) + 1):
        if N % i == 0:
            return i, N // i
